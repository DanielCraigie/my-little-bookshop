#!/usr/bin/env php
<?php
if (in_array('--help', $argv)
    || in_array('-h', $argv)
    || count($argv) == 1
):?>
getOrder - provides details for a specific Order

Options:
    -p, --partition-key

Usage:
    getOrder --partition-key <Order PK>
    getOrder --help

<?php
exit;
endif;

require implode(DIRECTORY_SEPARATOR, ['..', '.bootstrap.php']);

use Brick\Money\Money;
use Danielcraigie\Bookshop\AWS\dynamodb\DynamoDB;
use Danielcraigie\Bookshop\AWS\dynamodb\Table;

try {
    // verify table exists
    $table = new Table();
    $table->confirmExists();

    $orderPk = '';
    $orderDetails = [];

    /*
     * Handle user arguments
     */
    for ($i = 1; $i < $argc; $i++) {
        switch ($argv[$i]) {
            case '-p':
            case '--partition-key':
                $orderPk = $argv[++$i];

                $results = DynamoDb::query([
                    'ExpressionAttributeNames' => [
                        '#startdate' => 'StartDate',
                        '#total' => 'Total',
                        '#quantity' => 'Quantity',
                    ],
                    'ExpressionAttributeValues' => [
                        ':pk' => ['S' => $orderPk],
                        ':sk' => ['S' => 'details'],
                    ],
                    'KeyConditionExpression' => 'PK=:pk AND SK=:sk',
                    'ProjectionExpression' => '#startdate, #total, #quantity',
                ]);

                if (empty($results)) {
                    throw new Exception(sprintf("Could not find details for Order \"%s\"", $orderPk));
                }

                foreach (reset($results) as $attribute => $value) {
                    $orderDetails[$attribute] = reset($value);
                }

                break;
        }
    }

    /*
     * Print opening order line
     */
    $startDate = new DateTime($orderDetails['StartDate']);
    printf("Order \"%s\" started on %s:\n", $orderPk, $startDate->format('d/m/Y'));

    /*
     * Print details of ordered items
     */
    $books = DynamoDb::query([
        'ExpressionAttributeNames' => [
            '#value' => 'Value',
            '#price' => 'Price',
            '#quantity' => 'Quantity',
        ],
        'ExpressionAttributeValues' => [
            ':pk' => ['S' => $orderPk],
            ':sk' => ['S' => 'book#'],
        ],
        'KeyConditionExpression' => 'PK=:pk AND begins_with(SK, :sk)',
        'ProjectionExpression' => 'SK, #value, #price, #quantity',
        'Table' => $_ENV['TABLE_NAME'],
    ]);

    foreach ($books as $book) {
        $price = Money::of(reset($book['Price']), $_ENV['CURRENCY']);
        printf("%s x %s (%s) @ £%s\n", reset($book['Quantity']), reset($book['SK']), reset($book['Value']), (string) $price->getAmount());
    }

    printf("Total items: %s; Order Total: £%s\n", $orderDetails['Quantity'], $orderDetails['Total']);
} catch (Throwable $e) {
    printf("An error occurred while querying the table: %s", $e->getMessage());
    return 1;
}
