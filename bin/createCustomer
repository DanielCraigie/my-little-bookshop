#!/usr/bin/env php
<?php
if (in_array('--help', $argv)
    || in_array('-h', $argv)
):?>
createCustomer - creates new Customer

Usage:
    createCustomer
    createCustomer --help

<?php
exit;
endif;

require implode(DIRECTORY_SEPARATOR, ['..', '.bootstrap.php']);

use Danielcraigie\Bookshop\AWS\dynamodb\DynamoDB;
use Danielcraigie\Bookshop\AWS\dynamodb\Table;
use Ramsey\Uuid\Uuid;

try {
    $table = new Table();
    $table->confirmExists();

    // create faker to provide data
    $faker = Faker\Factory::create();
    $faker->addProvider(new Faker\Provider\en_GB\Address($faker));
    $faker->addProvider(new Faker\Provider\en_GB\PhoneNumber($faker));

    $customerPartitionKey = sprintf('customer#%s', Uuid::uuid4()->toString());
    $customerName = $faker->name();

    // find existing publisher item
    $results = DynamoDB::query([
        'ExpressionAttributeValues' => [
            ':pk' => ['S' => 'customers'],
            ':sk' => ['S' => $customerName],
        ],
        'IndexName' => 'GSI1',
        'KeyConditionExpression' => 'GSI1PK=:pk and GSI1SK=:sk',
    ]);

    // create new publisher item if none found
    if (!empty($results)) {
        throw new Exception(sprintf('Customer "%s" already exists in the table.', $customerName));
    }

    /*
     * write customer item
     */
    try {
        DynamoDB::putItem([
            'PK' => ['S' => $customerPartitionKey],
            'SK' => ['S' => 'name'],
            'Value' => ['S' => $customerName],
            'GSI1PK' => ['S' => 'customers'],
            'GSI1SK' => ['S' => $customerName],
        ]);
    } catch (Exception $e) {
        throw new Exception(sprintf('Customer %s could not be written to the table: %s', $customerPartitionKey, $e->getMessage()));
    }

    /*
     * write customer address relation
     */
    $addressKey = sprintf('address#%s', Uuid::uuid4()->toString());
    try {
        DynamoDB::putItem([
            'PK' => ['S' => $customerPartitionKey],
            'SK' => ['S' => $addressKey],
            'Street1' => ['S' => $faker->streetAddress()],
            'City' => ['S' => $faker->city()],
            'Postcode' => ['S' => $faker->postcode()],
            'Type' => ['S' => 'Home'],
        ]);
    } catch (Exception $e) {
        throw new Exception(sprintf('Customer %s Address %s could not be written to the table: %s', $customerPartitionKey, $addressKey, $e->getMessage()));
    }

    /*
     * write customer phone relation
     */
    $phoneKey = sprintf('phone#%s', Uuid::uuid4()->toString());
    try {
        DynamoDB::putItem([
            'PK' => ['S' => $customerPartitionKey],
            'SK' => ['S' => $phoneKey],
            'Value' => ['S' => $faker->phoneNumber()],
        ]);
    } catch (Exception $e) {
        throw new Exception(sprintf('Customer %s Phone %s could not be written to the table: %s', $customerPartitionKey, $phoneKey, $e->getMessage()));
    }

    /*
     * write customer email relation
     */
    $emailKey = sprintf('email#%s', Uuid::uuid4()->toString());
    try {
        DynamoDB::putItem([
            'PK' => ['S' => $customerPartitionKey],
            'SK' => ['S' => $emailKey],
            'Value' => ['S' => $faker->email()],
        ]);
    } catch (Exception $e) {
        throw new Exception(sprintf('Customer %s Email %s could not be written to the table: %s', $customerPartitionKey, $emailKey, $e->getMessage()));
    }

    printf("Customer \"%s\" created.\n", $customerName);
} catch (Throwable $e) {
    printf("An error occurred while adding the Customer: %s", $e->getMessage());
    return 1;
}
